
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module footsies_fpga(

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// IR //////////
	input 		          		IRDA_RXD,
	output		          		IRDA_TXD,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		          		VGA_CLK,
	output		          		VGA_HS,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,
	output		     [7:0]		VGA_R,
	output		     [7:0]		VGA_G,
	output		     [7:0]		VGA_B
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

    // Internal signals
	 wire clk_25;
    wire [9:0] pixel_x, pixel_y;
    wire [7:0] color_in;
    wire clk_game;

    //////////////////////////////////////////////////////////////////////////
    // Clock Divider & Selector (60Hz or manual step)
    //////////////////////////////////////////////////////////////////////////
    switch_clock clk_sel (
        .clk_25MHz(CLOCK_50),              // Your board runs at 50MHz; modify if using 25MHz
        .manual_step(~KEY[1]),             //manual step button
        .mode_select(SW[1]),               //mode select switch
        .clk_game(clk_game)
    );

    //////////////////////////////////////////////////////////////////////////
    // Game Logic
    //////////////////////////////////////////////////////////////////////////
    game_design game (
        .clk_game(clk_game),
        .reset(~SW[0]),                   //RESET THE GAME
        .pixel_x(pixel_x),
        .pixel_y(pixel_y),
        .left_button(~KEY[3]),             //move left
        .right_button(~KEY[2]),            //move right
        .color_out(color_in),
		  .attack_button(~KEY[0])
    );
	 
	 divide_clock clk_div_inst (
    .clk_50mhz(CLOCK_50),
    .clk_25mhz(clk_25)
);


    //////////////////////////////////////////////////////////////////////////
    // VGA Driver
    //////////////////////////////////////////////////////////////////////////
    vga_driver vga (
        .clock(clk_25),
        .reset(~SW[0]),
        .color_in(color_in),
        .next_x(pixel_x),
        .next_y(pixel_y),
        .hsync(VGA_HS),
        .vsync(VGA_VS),
        .red(VGA_R),
        .green(VGA_G),
        .blue(VGA_B),
        .sync(VGA_SYNC_N),
        .clk(VGA_CLK),
        .blank(VGA_BLANK_N)
    );




//=======================================================
//  Structural coding
//=======================================================



endmodule
